<#
#
#>

Param(
   [Parameter(Position=0)]
   [ValidateSet('install','uninstall','start','stop','restart','ping','console','attach','list','usage')]
   [System.String]$Command="usage"
)

function Set-Bindir
{
  param([string] $releaseRoot)
  $parentOfReleaseRoot = Split-Path $releaseRoot -Parent
  $baseBinDir = Split-Path $parentOfReleaseRoot -Parent
  "$baseBinDir\erts-$erts_vsn\bin"
}

Set-Variable rel_name -option Constant -value "<%= release_name %>"
Set-Variable rel_vsn -option Constant -value "<%= release_version %>"
Set-Variable erts_vsn -option Constant -value "<%= erts_vsn %>"
Set-Variable erl_opts  -option Constant -value "<%= erl_opts %>"
Set-Variable progname -option Constant -value "erl.exe"
$bindir = Set-Bindir $PSScriptRoot
Set-Variable erlsrv -option Constant -value "$bindir\erlsrv.exe"
Set-Variable epmd -option Constant -value "$bindir\epmd.exe"
Set-Variable escript -option Constant -value "$bindir\escript.exe"
Set-Variable werl -option Constant -value "$bindir\werl.exe"
function Set-ReleaseRoot
{
    $script_dir = $PSScriptRoot
    Split-Path $script_dir -Parent
}
$release_root_dir = Set-ReleaseRoot 
Set-Variable nodetool -option Constant -value "$release_root_dir\\releases\\$rel_vsn"

function Set-RelDir
{
  param([string] $scriptDir)
  $release_root_dir = Split-Path $scriptDir -Parent
  "$release_root_dir\releases\$rel_vsn"
}

function Set-Root
{
  param([string] $scriptDir)
  $parentOfScriptDir = Split-Path $scriptDir -Parent
  Split-Path $parentOfScriptDir -Parent
}

Set-Variable binaryNotFound -option Constant -value "No binary found"
Set-Variable service_name -option Constant -value "<%= release_name %>_<%= release_version %>"
$env:ROOT = Set-Root $PSScriptRoot
$env:PATH = "$env:ROOT/lib/kernel-5.1.1/ebin; $env:ROOT/lib/stdlib-3.2/ebin;"+$env:PATH

#Start here on 2/7/2017
#set boot_script variable

function Set-BootScriptVar
{
  $release_root = Set-ReleaseRoot
  $release_dir = "$release_root\$rel_vsn"
  if (Test-Path $release_dir\$rel_name.boot)
  {
       "$release_dir\$rel_name.boot"
  } else {
        "$release_dir\start_clean.boot"
      }
    "$release_dir\start_clean.boot"
}

function Fix-PathsWithLongNamesOrSpaces
{
    param([string] $pathToFix)
    $pathParts = $pathToFix.Split([System.IO.Path]::DirectorySeparatorChar)
    #for each element in array if it contains a space, surround it with double quotes
    #test for two things:
    # Does the directory contain spaces 
    # Is any portion of the directory longer than 8 characters

    #If either of these is true, we need to wrap the path with double quotes
}

function Get-NodeAndCookieFromVMArgs
{
  param([string]$VMArgFile)
  $node_type = Get-Content -Path $VMArgFile | Where-Object ($_ -like '-name')
  $node_name = Get-Content -Path $VMArgFile | Where-Object ($_ -like '-sname')
  $cookie = Get-Content -Path $VMArgFile | Where-Object ($_ -like '-setcookie')
  $node_type, $node_name, $cookie
}

function Find-ErtsDir
{
    $release_root = Set-ReleaseRoot
    $possible_erts_dir = "$release_root\erts-$erts_vsn"
    $possible_erts_dir
}

function Test-ServiceIsInstalled
{
    param([string]$servicename)
    try
    {
	$svc = Get-Service -Name $servicename -ErrorAction SilentlyContinue
	$svc -ne $null
    }
    catch{$false}
}

function Get-BinaryInPath
{
    param([string]$binaryname)

    $bin = Get-Command $binaryname -ErrorAction SilentlyContinue

    if($bin -ne $null)
    {
	$bin.Definition
    }
    else
    {
	$bin
    }
}

function Get-BinaryInProgramFiles
{
    param([string]$binaryname)
    cd $env:ProgramFiles

    # Can only use Get-ChildItem if binary is in Path.
    $bin = Get-ChildItem $binaryname -ErrorAction SilentlyContinue -Recurse 
    if ($bin -ne $null)
    {
	$bin.Definition
    }
    else
    {
        $bin
    }
}

function Get-BinaryByName
{
    param([string]$binaryname)

    $binInPath = Get-BinaryInPath($binaryname)

    if ($binInPath -eq $null)
    {
	$binInProgramFiles = Get-BinaryInProgramFiles($binaryname)
	if ($binInProgramFiles -eq $null)
	{
	    $binaryNotFound
	}
        else
	{
	    $binInProgramFiles
	}
    }
    else
    {
	$binInPath
    }
}

function Set-SysConfig
{
   $releaseRoot = Set-ReleaseRoot
   $possibleSysConfig = "$releaseRoot\$rel_vsn\sys.config"
   $sysConfig = ""
   if(Test-Path $possibleSysConfig)
   {
      $sysConfig = "-config $possibleSysConfig"
   }
   $sysConfig
}
   

function Set-VmArgs
{
   $releaseRoot = Set-ReleaseRoot
   "$releaseRoot\$rel_vsn\vm.args"
}

  

#Start a console
function Execute-Console
{
    $boot_script = Set-BootScriptVar
    $sys_config = Set-SysConfig

    $vm_args = Set-VmArgs

    $cmdLine =  "$($werl) -boot $(Set-BootScriptVar) $(Set-SysConfig) -args_file $(Set-VmArgs)"
 
    iex $cmdLine
}

function Execute-Install
{
  if(Test-ServiceIsInstalled $service_name)
  {
    return;
  }
  else
    {
      $start_erl = "$(Find-ErtsDir)\bin\start_erl.exe"
      return;
    }  
}


function Execute-Uninstall
{
  return;
}

function Display-Usage
{
    $scriptName = Split-Path -Path $MyInvocation.ScriptName -Leaf
    Write-Host "usage: $scriptName (install|uninstall|start|stop|restart|upgrade|downgrade|console|ping|list|attach)"
    exit
}

switch ($Command)
{
  "usage"
  {
    Display-Usage;
    break
  }

  "console"
  {
    Write-Host "Hit the console branch"
    Execute-Console
    break;
  }

  "install"
  {
    Write-Host "Hit the install branch"
    Execute-Install
    break;
  }

  "uninstall"
  {
    Write-Host "Hit the uninstall branch"
    Execute-Uninstall
    break;
  }
}
